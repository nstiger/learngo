//打印金字塔

package main
import (
	"fmt"
)

//先打印一个矩形


func main() {
	//1、先打一行×号，就是列数个×号
	//2、打印一个固定行数和列数的矩形，比如3行5列，列数是内循环，行数是外循环
	//3、把行号和列号换成变量
	//4-1、打印一个直角三角形：当行号等于1时，打印1颗星，为2时打印2颗星.......，即：用行数控制列的打印数量
	//4-2、把内循环的循环条件改为i<=j即可！
	//5、打印一个等腰三角形：
	/*  等腰三角形的特点：
  *     第1行，1个星 => 2*行数-1，前面空格数2, 总行数 - 当前行数
 ***    第2行，3个星 => 2*行数-1，前面空格数2, 总行数 - 当前行数
*****   第3行，5个星 => 2*行数-1，前面空格数2, 总行数 - 当前行数
	*/
	//6、打印空心金字塔
	/*空心金字塔的特点：
	  ×   1.如果不是本行第一颗和最后一颗，不打星，打空格
	 × ×
	××××× 2.最后一行，全部打星。

	*/

	var row int = 10
//	var col int = 10
	var i,j int

	fmt.Println("请输入行数")
	fmt.Scanf("%d",&row)

	for j = 1 ; j <= row; j++ {
		//先打印空格
		for k :=1; k <= row - j; k++ {
			fmt.Printf(" ")
		}

		for i = 1; i <= 2 * j - 1; i++ {
			//如果是本行第一或者最后一颗，打星，否则打空格：if i == 1 || i == 2 * j -1
			//如果是最后一行，全部打星：if i == 1 || i == 2 * j -1 || j == row
			if i == 1 || i == 2 * j -1 || j == row {
				fmt.Printf("*")
			} else {
				fmt.Printf(" ")
			}
		}

		fmt.Println()
	}




}